/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RaffleRequestedWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620017c3380380620017c38339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516113e3620003e060003960006107af0152600061065f0152600061063c0152600061061b015260006105df0152600081816102b401526103b10152600081816102f1015261034501526113e36000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780635f1b0fd8146101df5780636e04ff0d1461020a578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610fe9565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610fce565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dc2565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610fe9565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610cd2565b610528565b005b34801561019557600080fd5b5061019e610727565b6040516101ab9190610f07565b60405180910390f35b3480156101c057600080fd5b506101c9610751565b6040516101d69190610fe9565b60405180910390f35b3480156101eb57600080fd5b506101f4610760565b6040516102019190610fe9565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610d1f565b61076d565b60405161023f929190610f4b565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190610d68565b610819565b60405161027c9190610f07565b60405180910390f35b34801561029157600080fd5b5061029a610860565b6040516102a79190610fe9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190610f22565b60405180910390fd5b6103ab828261086c565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c6112c3565b5b600160149054906101000a900460ff16600181111561043f5761043e6112c3565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105426040518060200160405280600081525061076d565b509050806105b15747600080549050600160149054906101000a900460ff166001811115610573576105726112c3565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105a893929190611004565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105d6576105d56112c3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a0959493929190610f7b565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610d95565b9050807fbc468346201bb823e5cd7f42ad69fca3219e3db2e1e253b6ff27622f7835ec5560405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000806001811115610786576107856112c3565b5b600160149054906101000a900460ff1660018111156107a8576107a76112c3565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107dc91906110e4565b119050600080600080549050119050600080471190508380156107fc5750825b80156108055750815b801561080e5750805b955050505050915091565b600080828154811061082e5761082d6112f2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610887576108866112f2565b5b60200260200101516108999190611234565b905060008082815481106108b0576108af6112f2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610944576109436112c3565b5b0217905550600067ffffffffffffffff81111561096457610963611321565b5b6040519080825280602002602001820160405280156109925781602001602082028036833780820191505090505b50600090805190602001906109a8929190610a9d565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109d690610ef2565b60006040518083038185875af1925050503d8060008114610a13576040519150601f19603f3d011682016040523d82523d6000602084013e610a18565b606091505b5050905080610a53576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b16579160200282015b82811115610b155782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abd565b5b509050610b239190610b27565b5090565b5b80821115610b40576000816000905550600101610b28565b5090565b6000610b57610b5284611060565b61103b565b90508083825260208201905082856020860282011115610b7a57610b7961135a565b5b60005b85811015610baa5781610b908882610ca8565b845260208401935060208301925050600181019050610b7d565b5050509392505050565b6000610bc7610bc28461108c565b61103b565b905082815260208101848484011115610be357610be261135f565b5b610bee8482856111c1565b509392505050565b600082601f830112610c0b57610c0a611355565b5b8135610c1b848260208601610b44565b91505092915050565b60008083601f840112610c3a57610c39611355565b5b8235905067ffffffffffffffff811115610c5757610c56611350565b5b602083019150836001820283011115610c7357610c7261135a565b5b9250929050565b600082601f830112610c8f57610c8e611355565b5b8135610c9f848260208601610bb4565b91505092915050565b600081359050610cb781611396565b92915050565b600081519050610ccc81611396565b92915050565b60008060208385031215610ce957610ce8611369565b5b600083013567ffffffffffffffff811115610d0757610d06611364565b5b610d1385828601610c24565b92509250509250929050565b600060208284031215610d3557610d34611369565b5b600082013567ffffffffffffffff811115610d5357610d52611364565b5b610d5f84828501610c7a565b91505092915050565b600060208284031215610d7e57610d7d611369565b5b6000610d8c84828501610ca8565b91505092915050565b600060208284031215610dab57610daa611369565b5b6000610db984828501610cbd565b91505092915050565b60008060408385031215610dd957610dd8611369565b5b6000610de785828601610ca8565b925050602083013567ffffffffffffffff811115610e0857610e07611364565b5b610e1485828601610bf6565b9150509250929050565b610e2781611118565b82525050565b610e368161112a565b82525050565b610e4581611136565b82525050565b6000610e56826110bd565b610e6081856110c8565b9350610e708185602086016111d0565b610e798161136e565b840191505092915050565b610e8d816111af565b82525050565b6000610ea06000836110d9565b9150610eab8261137f565b600082019050919050565b610ebf81611153565b82525050565b610ece81611181565b82525050565b610edd8161118b565b82525050565b610eec8161119b565b82525050565b6000610efd82610e93565b9150819050919050565b6000602082019050610f1c6000830184610e1e565b92915050565b6000604082019050610f376000830185610e1e565b610f446020830184610e1e565b9392505050565b6000604082019050610f606000830185610e2d565b8181036020830152610f728184610e4b565b90509392505050565b600060a082019050610f906000830188610e3c565b610f9d6020830187610ee3565b610faa6040830186610eb6565b610fb76060830185610ed4565b610fc46080830184610ed4565b9695505050505050565b6000602082019050610fe36000830184610e84565b92915050565b6000602082019050610ffe6000830184610ec5565b92915050565b60006060820190506110196000830186610ec5565b6110266020830185610ec5565b6110336040830184610ec5565b949350505050565b6000611045611056565b90506110518282611203565b919050565b6000604051905090565b600067ffffffffffffffff82111561107b5761107a611321565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110a7576110a6611321565b5b6110b08261136e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006110ef82611181565b91506110fa83611181565b92508282101561110d5761110c611265565b5b828203905092915050565b600061112382611161565b9050919050565b60008115159050919050565b6000819050919050565b600081905061114e82611382565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006111ba82611140565b9050919050565b82818337600083830152505050565b60005b838110156111ee5780820151818401526020810190506111d3565b838111156111fd576000848401525b50505050565b61120c8261136e565b810181811067ffffffffffffffff8211171561122b5761122a611321565b5b80604052505050565b600061123f82611181565b915061124a83611181565b92508261125a57611259611294565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611393576113926112c3565b5b50565b61139f81611181565b81146113aa57600080fd5b5056fea2646970667358221220d567f5407880111460a4d054abbe784789065cc180c93675938505f965e03e9964736f6c63430008070033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
